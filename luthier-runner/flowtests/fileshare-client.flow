import uy.com.netlabs.esb.endpoint._, logical._, jms._
import java.nio.file._
import scala.concurrent.util.duration._
import collection.JavaConversions._

val jmsConnection = {
 val res = new org.apache.activemq.ActiveMQConnectionFactory("tcp://" + args(1))
 res.setDispatchAsync(true)
 res.setUseRetroactiveConsumer(true)
 res.setRedeliveryPolicy({
   val res = new org.apache.activemq.RedeliveryPolicy
   res setMaximumRedeliveries 1
   res
 })
 res.createQueueConnection
}

val destDir = Paths.get(args(0))

new Flow("DirShareClient")(Metronome(null, 1.second, 1.second)) {
  logic {m => 
    Jms.queue("dirshare", jmsConnection).ask(m.mapTo[String]) onSuccess {
      case m => m.payload match {
        case (name: String, bytes: Array[Byte]) =>
          val f = destDir.resolve(name)
          Files.write(f, bytes, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)
        case other => println("Server response: " + other + " -- " + other.getClass)
      }
    }
  }
}
